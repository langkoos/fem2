/* *********************************************************************** *
 * project: org.matsim.*
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2008 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.run.gui;

import femproto.run.RunMatsim4FloodEvacuation;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

public class MATSimGUI {
	//	The jar file is generated by "mvn package".  Note that the pom.xml refers at some point to this class here.  So
	// don't change the name here without changing it there as well.
	
	private static final String startCreateMATSimDemandFromSubsectorData = "Start CreateMATSimDemandFromSubsectorData";
	private static final String stopCreateMATSimDemandFromSubsectorData = "Stop CreateMATSimDemandFromSubsectorData";
	
	private Gui gui ;
	
	private ExeRunner exeRunner = null;
	private JButton button ;

	public static void main(String[] args) {
		new MATSimGUI().run();
	}
	
	private void run() {
		gui = Gui.create("FEM GUI", RunMatsim4FloodEvacuation.class);
		
		// the following material is here to demonstrate that we can, in principle, add buttons, which
		// remain grayed out until the config is loaded.
		
		button = new JButton( startCreateMATSimDemandFromSubsectorData );
		gui.addPreprocessButton( "abc", button );
		
		button.addActionListener( new ActionListener() {
			@Override
			public void actionPerformed( ActionEvent e ) {
				if ( exeRunner == null ) {
					startCreateDemand();
				} else {
					stopCreateDemand();
				}
			}
		} );
		
		
		gui.run() ;
		
		//		// the following material is here to demonstrate that we can, in principle, add menu items.
		//		
		//		JMenu femTools = new JMenu("FEMTools");
		//		gui.addToMenuBar(femTools);
		//		
		//		JMenuItem doSomething = new JMenuItem("Test");
		//		femTools.add(doSomething);
		//		doSomething.addActionListener(new ActionListener() {
		//			@Override
		//			public void actionPerformed(ActionEvent e) {
		//				PopulationSampler popSampler = new PopulationSampler();
		//				popSampler.setVisible(true);
		//			}
		//		});
	}
	
	
	private void startCreateDemand() {
		this.button.setEnabled(false);
		
		new Thread(new Runnable() {
			@Override
			public void run() {
				String classpath = System.getProperty("java.class.path");
				String[] cpParts = classpath.split(File.pathSeparator);
				StringBuilder absoluteClasspath = new StringBuilder();
				for (String cpPart : cpParts) {
					if (absoluteClasspath.length() > 0) {
						absoluteClasspath.append(File.pathSeparatorChar);
					}
					absoluteClasspath.append(new File(cpPart).getAbsolutePath());
				}
				String[] cmdArgs = new String[] {
						gui.getTxtJvmlocation().getText(),
						"-cp",
						absoluteClasspath.toString(),
						"-Xmx" + gui.getTxtRam().getText() + "m",
						MATSimGUI.this.gui.getMainClass(),
						gui.getTxtConfigfilename().getText()
				};
				MATSimGUI.this.gui.getTextStdOut().setText("");
				MATSimGUI.this.gui.getTextErrOut().setText("");
				MATSimGUI.this.exeRunner = ExeRunner.run(cmdArgs, MATSimGUI.this.gui.getTextStdOut(), MATSimGUI.this.gui.getTextErrOut(), new File(gui.getTxtConfigfilename().getText()).getParent());
				MATSimGUI.this.button.setText(stopCreateMATSimDemandFromSubsectorData);
				MATSimGUI.this.button.setEnabled(true);
				int exitcode = exeRunner.waitForFinish();
				MATSimGUI.this.exeRunner = null;
				
				SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						button.setText(startCreateMATSimDemandFromSubsectorData);
						button.setEnabled(true);
					}
				});
				
				if (exitcode != 0) {
					MATSimGUI.this.gui.getTextStdOut().append("\n");
					MATSimGUI.this.gui.getTextStdOut().append("The simulation did not run properly. Error/Exit code: " + exitcode);
					MATSimGUI.this.gui.getTextStdOut().setCaretPosition(MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
					MATSimGUI.this.gui.getTextErrOut().append("\n");
					MATSimGUI.this.gui.getTextErrOut().append("The simulation did not run properly. Error/Exit code: " + exitcode);
					MATSimGUI.this.gui.getTextErrOut().setCaretPosition(MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
					throw new RuntimeException("There was a problem running MATSim. exit code: " + exitcode);
				}
			}
		}).start();
		
	}
	
	private void stopCreateDemand() {
		ExeRunner runner = this.exeRunner;
		if (runner != null) {
			runner.killProcess();
			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					button.setText(startCreateMATSimDemandFromSubsectorData);
					button.setEnabled(true);
					
					MATSimGUI.this.gui.getTextStdOut().append("\n");
					MATSimGUI.this.gui.getTextStdOut().append("The simulation was stopped forcefully.");
					MATSimGUI.this.gui.getTextStdOut().setCaretPosition(MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
					MATSimGUI.this.gui.getTextErrOut().append("\n");
					MATSimGUI.this.gui.getTextErrOut().append("The simulation was stopped forcefully.");
					MATSimGUI.this.gui.getTextErrOut().setCaretPosition(MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
				}
			});
		}
	}
	
}
