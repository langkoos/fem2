/* *********************************************************************** *
 * project: org.matsim.*
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2008 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.run.gui;

import femproto.run.RunFromSource;

import javax.swing.*;

public class MATSimGUI {
	//	The jar file is generated by "mvn package".  Note that the pom.xml refers at some point to this class here.  So
	// don't change the name here without changing it there as well.
	
	private static final String CREATE_DEMAND_FROM_SUBSECTOR_DATA = "CreateMATSimDemandFromSubsectorData";
	private static final String VERIFICATION_RUN = "evac schedule verification run" ;
	
	private Gui gui ;
	
	private ExeRunner exeRunner = null;
	private JButton btnShpToPlans;
	private JButton btnVerificationRun;

	public static void main(String[] args) {
		new MATSimGUI().run();
	}
	
	private void run() {
		gui = Gui.create("FEM GUI", RunFromSource.class);
		
//		{
//			// button is grayed out until config is loaded
//			btnShpToPlans = new JButton( "Start " + CREATE_DEMAND_FROM_SUBSECTOR_DATA );
//			gui.addPreprocessButton( "abc", btnShpToPlans );
//
//			btnShpToPlans.addActionListener( actionEvent -> {
//				if ( exeRunner == null ) {
//					startCreateDemand();
//				} else {
//					stopProcess( btnShpToPlans, CREATE_DEMAND_FROM_SUBSECTOR_DATA );
//				}
//			} );
//		}
//		{
//			// the final spec does not require verification runs anymore, so this section does not apply
//			// button is grayed out until config is loaded  which is wrong, should wait until end of optim run. kai, sep'18
//			// decision to have only 3 buttons: prepare, optimize, verify.  Still an issue, but not so large any more. kai/pieter, sep'18
//
//			btnVerificationRun = new JButton( "Start " + VERIFICATION_RUN );
//			gui.addPostprocessButton( "def", btnVerificationRun );
//
//			btnVerificationRun.addActionListener( actionEvent -> {
//				if ( exeRunner == null ) {
//					startVerificationRun();
//				} else {
//					stopProcess( btnVerificationRun, VERIFICATION_RUN );
//				}
//
//			} );
//		}
		gui.run() ;
		
		//		// the following material is here to demonstrate that we can, in principle, add menu items.
		//		
		//		JMenu femTools = new JMenu("FEMTools");
		//		gui.addToMenuBar(femTools);
		//		
		//		JMenuItem doSomething = new JMenuItem("Test");
		//		femTools.add(doSomething);
		//		doSomething.addActionListener(new ActionListener() {
		//			@Override
		//			public void actionPerformed(ActionEvent e) {
		//				PopulationSampler popSampler = new PopulationSampler();
		//				popSampler.setVisible(true);
		//			}
		//		});
	}

	private void processExitCode( final int exitcode ) {
		if (exitcode != 0) {
			MATSimGUI.this.gui.getTextStdOut().append("\n");
			MATSimGUI.this.gui.getTextStdOut().append("The process did not run properly. Error/Exit code: " + exitcode);
			MATSimGUI.this.gui.getTextStdOut().setCaretPosition(MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
			MATSimGUI.this.gui.getTextErrOut().append("\n");
			MATSimGUI.this.gui.getTextErrOut().append("The process did not run properly. Error/Exit code: " + exitcode);
			MATSimGUI.this.gui.getTextErrOut().setCaretPosition(MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
			throw new RuntimeException("There was a problem. exit code: " + exitcode);
		}
	}

}
