/* *********************************************************************** *
 * project: org.matsim.*
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2008 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.run.gui;

import femproto.prepare.demand.SubSectorsToPopulation;
import femproto.run.EvacScheduleVerificationRun;
import femproto.run.FEMConfigGroup;
import femproto.run.RunMatsim4FloodEvacuation;
import org.apache.log4j.Logger;
import org.matsim.core.config.Config;
import org.matsim.core.config.ConfigGroup;
import org.matsim.core.config.ConfigUtils;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Arrays;

public class MATSimGUI {
	//	The jar file is generated by "mvn package".  Note that the pom.xml refers at some point to this class here.  So
	// don't change the name here without changing it there as well.
	
	private static final String CREATE_DEMAND_FROM_SUBSECTOR_DATA = "CreateMATSimDemandFromSubsectorData";
	private static final String VERIFICATION_RUN = "evac schedule verification run" ;
	
	private Gui gui ;
	
	private ExeRunner exeRunner = null;
	private JButton btnShpToPlans;
	private JButton btnVerificationRun;

	public static void main(String[] args) {
		new MATSimGUI().run();
	}
	
	private void run() {
		gui = Gui.create("FEM GUI", RunMatsim4FloodEvacuation.class);
		
		{
			// button is grayed out until config is loaded
			btnShpToPlans = new JButton( "Start " + CREATE_DEMAND_FROM_SUBSECTOR_DATA );
			gui.addPreprocessButton( "abc", btnShpToPlans );
			
			btnShpToPlans.addActionListener( actionEvent -> {
				if ( exeRunner == null ) {
					startCreateDemand();
				} else {
					stopProcess( btnShpToPlans, CREATE_DEMAND_FROM_SUBSECTOR_DATA );
				}
			} );
		}
		{
			// button is grayed out until config is loaded yyyyyy which is wrong, should wait until end of optim run. kai, sep'18

			btnVerificationRun = new JButton( "Start " + VERIFICATION_RUN );
			gui.addPostprocessButton( "def", btnVerificationRun );
			
			btnVerificationRun.addActionListener( actionEvent -> {
				if ( exeRunner == null ) {
					startVerificationRun();
				} else {
					stopProcess( btnVerificationRun, VERIFICATION_RUN );
				}
				
			} );
		}
		gui.run() ;
		
		//		// the following material is here to demonstrate that we can, in principle, add menu items.
		//		
		//		JMenu femTools = new JMenu("FEMTools");
		//		gui.addToMenuBar(femTools);
		//		
		//		JMenuItem doSomething = new JMenuItem("Test");
		//		femTools.add(doSomething);
		//		doSomething.addActionListener(new ActionListener() {
		//			@Override
		//			public void actionPerformed(ActionEvent e) {
		//				PopulationSampler popSampler = new PopulationSampler();
		//				popSampler.setVisible(true);
		//			}
		//		});
	}
	
	
	private void startCreateDemand() {
		this.btnShpToPlans.setEnabled(false);
		
		new Thread(new Runnable() {
			@Override
			public void run() {
				
				Config config = ConfigUtils.loadConfig( MATSimGUI.this.gui.getTxtConfigfilename().getText() );
				
				final FEMConfigGroup femConfig = ConfigUtils.addOrGetModule( config, FEMConfigGroup.class );;
				
				// get all the paths to all the jar files for this here (in our case only one jar file, but that's not always the case):
				String[] cpParts = System.getProperty("java.class.path").split(File.pathSeparator);
				StringBuilder absoluteClasspaths = new StringBuilder();
				for (String cpPart : cpParts) {
					if (absoluteClasspaths.length() > 0) {
						absoluteClasspaths.append(File.pathSeparatorChar);
					}
					absoluteClasspaths.append(new File(cpPart).getAbsolutePath());
				}
				
				final String inputShapeFile = femConfig.getInputSubsectorsShapefile();;
				final String networkFile = config.network().getInputFile() ;
				final String evacNodesFile = femConfig.getInputSubsectorsToSafeNodesMappingsFile() ;
				final String outputPopFile = config.plans().getInputFile() ;
				final String attribsFile = "popAttribs.xml.gz" ; // yy really needed?
				
				// construct the command line:
				String[] cmdArgs = new String[] {
						gui.getTxtJvmlocation().getText(),
						"-cp",
						absoluteClasspaths.toString(),
						"-Xmx" + gui.getTxtRam().getText() + "m",
						SubSectorsToPopulation.class.getName(), //  <== the class to run!
						ConfigGroup.getInputFileURL( config.getContext(), inputShapeFile).getFile() ,
						ConfigGroup.getInputFileURL( config.getContext(), networkFile ).getFile(),
						ConfigGroup.getInputFileURL( config.getContext(), evacNodesFile).getFile(),
						ConfigGroup.getInputFileURL( config.getContext(), outputPopFile).getFile(),
						ConfigGroup.getInputFileURL( config.getContext(), attribsFile ).getFile()
				};
				
				Logger.getLogger( MATSimGUI.class ).info( "cmdArgs=" + Arrays.deepToString( cmdArgs ) ) ;
				
				MATSimGUI.this.gui.getTextStdOut().setText("");
				MATSimGUI.this.gui.getTextErrOut().setText("");
				
				MATSimGUI.this.exeRunner = ExeRunner.run(cmdArgs, MATSimGUI.this.gui.getTextStdOut(), MATSimGUI.this.gui.getTextErrOut(), new File(gui.getTxtConfigfilename().getText()).getParent());
				// the approach here probably is overkill.  it was introduced for matsim in order to be able to increase the jvm memory from the gui.  I have now left it in place since we
				// don't know if we may have the same issue with these additional processes.  kai, aug'18
				
				MATSimGUI.this.btnShpToPlans.setText("Stop " + CREATE_DEMAND_FROM_SUBSECTOR_DATA);
				MATSimGUI.this.btnShpToPlans.setEnabled(true);
				int exitcode = exeRunner.waitForFinish();
				MATSimGUI.this.exeRunner = null;
				
				SwingUtilities.invokeLater( () -> {
					btnShpToPlans.setText( "Start " + CREATE_DEMAND_FROM_SUBSECTOR_DATA );
					btnShpToPlans.setEnabled(true);
				} );
				
				processExitCode( exitcode );
			}
		}).start();
		
	}
	private void startVerificationRun() {
		this.btnVerificationRun.setEnabled(false);
		
		new Thread( () -> {
			
			// get all the paths to all the jar files for this here (in our case only one jar file, but that's not always the case):
			String[] cpParts = System.getProperty("java.class.path").split(File.pathSeparator);
			StringBuilder absoluteClasspaths = new StringBuilder();
			for (String cpPart : cpParts) {
				if (absoluteClasspaths.length() > 0) {
					absoluteClasspaths.append(File.pathSeparatorChar);
				}
				absoluteClasspaths.append(new File(cpPart).getAbsolutePath());
			}
			
			// construct the command line:
			String[] cmdArgs = new String[] {
					gui.getTxtJvmlocation().getText(),
					"-cp",
					absoluteClasspaths.toString(),
					"-Xmx" + gui.getTxtRam().getText() + "m",
					EvacScheduleVerificationRun.class.getName(), //  <== the class to run!
					MATSimGUI.this.gui.getTxtConfigfilename().getText()
			};
			
			Logger.getLogger( MATSimGUI.class ).info( "cmdArgs=" + Arrays.deepToString( cmdArgs ) ) ;
			
			MATSimGUI.this.gui.getTextStdOut().setText("");
			MATSimGUI.this.gui.getTextErrOut().setText("");
			
			MATSimGUI.this.exeRunner = ExeRunner.run(cmdArgs, MATSimGUI.this.gui.getTextStdOut(), MATSimGUI.this.gui.getTextErrOut(), new File(gui.getTxtConfigfilename().getText()).getParent());
			// the approach here probably is overkill.  it was introduced for matsim in order to be able to increase the jvm memory from the gui.  I have now left it in place since we
			// don't know if we may have the same issue with these additional processes.  Also, we may indeed need to increase memory for this one.  kai, aug'18
			
			MATSimGUI.this.btnVerificationRun.setText("Stop " + VERIFICATION_RUN);
			MATSimGUI.this.btnVerificationRun.setEnabled(true);
			int exitcode = exeRunner.waitForFinish();
			MATSimGUI.this.exeRunner = null;
			
			SwingUtilities.invokeLater( () -> {
				btnVerificationRun.setText("Start " + VERIFICATION_RUN);
				btnVerificationRun.setEnabled(true);
			} );
			
			processExitCode( exitcode );
		} ).start();
		
	}
	
	private void processExitCode( final int exitcode ) {
		if (exitcode != 0) {
			MATSimGUI.this.gui.getTextStdOut().append("\n");
			MATSimGUI.this.gui.getTextStdOut().append("The process did not run properly. Error/Exit code: " + exitcode);
			MATSimGUI.this.gui.getTextStdOut().setCaretPosition(MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
			MATSimGUI.this.gui.getTextErrOut().append("\n");
			MATSimGUI.this.gui.getTextErrOut().append("The process did not run properly. Error/Exit code: " + exitcode);
			MATSimGUI.this.gui.getTextErrOut().setCaretPosition(MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
			throw new RuntimeException("There was a problem. exit code: " + exitcode);
		}
	}
	
	private void stopProcess( final JButton button, final String nameOfProcess) {
		ExeRunner runner = this.exeRunner;
		if ( runner != null) {
			runner.killProcess();
			SwingUtilities.invokeLater( () -> {
				button.setText( "Start " + nameOfProcess );
				button.setEnabled(true);
				
				MATSimGUI.this.gui.getTextStdOut().append("\n");
				MATSimGUI.this.gui.getTextStdOut().append("The process was stopped forcefully.");
				MATSimGUI.this.gui.getTextStdOut().setCaretPosition( MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
				MATSimGUI.this.gui.getTextErrOut().append("\n");
				MATSimGUI.this.gui.getTextErrOut().append("The process was stopped forcefully.");
				MATSimGUI.this.gui.getTextErrOut().setCaretPosition( MATSimGUI.this.gui.getTextStdOut().getDocument().getLength());
			} );
		}
	}
	
}
